// Generated by Melange

import * as Webapi__Dom__Element from "./Webapi__Dom__Element.js";
import * as Webapi__Dom__EventTarget from "./Webapi__Dom__EventTarget.js";
import * as Webapi__Dom__HtmlElement from "./Webapi__Dom__HtmlElement.js";
import * as Webapi__Dom__Node from "./Webapi__Dom__Node.js";

function Impl(T) {
  const toString = function (param) {
    switch (param) {
      case /* Forward */ 0 :
        return "forward";
      case /* Backward */ 1 :
        return "backward";
      case /* None */ 2 :
        return "none";
    }
  };
  const SelectionDirection = {
    toString: toString
  };
  const setSelectionRangeWithDirection = function (selectionStart, selectionEnd, selectionDirection, element) {
    element.setSelectionRange(selectionStart, selectionEnd, toString(selectionDirection));
  };
  const toString$1 = function (param) {
    switch (param) {
      case /* Select */ 0 :
        return "select";
      case /* Start */ 1 :
        return "start";
      case /* End */ 2 :
        return "end";
      case /* Preserve */ 3 :
        return "preserve";
    }
  };
  const SelectionMode = {
    toString: toString$1
  };
  const setRangeTextWithinIntervalWithSelectionMode = function (text, selectionStart, selectionEnd, selectionMode, element) {
    element.setRangeText(text, selectionStart, selectionEnd, toString$1(selectionMode));
  };
  return {
    SelectionDirection: SelectionDirection,
    setSelectionRangeWithDirection: setSelectionRangeWithDirection,
    SelectionMode: SelectionMode,
    setRangeTextWithinIntervalWithSelectionMode: setRangeTextWithinIntervalWithSelectionMode
  };
}

Webapi__Dom__EventTarget.Impl({});

const include = Webapi__Dom__Node.Impl({});

const include$1 = Webapi__Dom__Element.Impl({});

const include$2 = Webapi__Dom__HtmlElement.Impl({});

function toString(param) {
  switch (param) {
    case /* Forward */ 0 :
      return "forward";
    case /* Backward */ 1 :
      return "backward";
    case /* None */ 2 :
      return "none";
  }
}

const SelectionDirection = {
  toString: toString
};

function setSelectionRangeWithDirection(selectionStart, selectionEnd, selectionDirection, element) {
  element.setSelectionRange(selectionStart, selectionEnd, toString(selectionDirection));
}

function toString$1(param) {
  switch (param) {
    case /* Select */ 0 :
      return "select";
    case /* Start */ 1 :
      return "start";
    case /* End */ 2 :
      return "end";
    case /* Preserve */ 3 :
      return "preserve";
  }
}

const SelectionMode = {
  toString: toString$1
};

function setRangeTextWithinIntervalWithSelectionMode(text, selectionStart, selectionEnd, selectionMode, element) {
  element.setRangeText(text, selectionStart, selectionEnd, toString$1(selectionMode));
}

const nodeType = include.nodeType;

const asHtmlElement = include$1.asHtmlElement;

const ofNode = include$1.ofNode;

const insertAdjacentElement = include$1.insertAdjacentElement;

const insertAdjacentHTML = include$1.insertAdjacentHTML;

const insertAdjacentText = include$1.insertAdjacentText;

const ofElement = include$2.ofElement;

const contentEditable = include$2.contentEditable;

const setContentEditable = include$2.setContentEditable;

const dir = include$2.dir;

const setDir = include$2.setDir;

export {
  Impl,
  nodeType,
  asHtmlElement,
  ofNode,
  insertAdjacentElement,
  insertAdjacentHTML,
  insertAdjacentText,
  ofElement,
  contentEditable,
  setContentEditable,
  dir,
  setDir,
  SelectionDirection,
  setSelectionRangeWithDirection,
  SelectionMode,
  setRangeTextWithinIntervalWithSelectionMode,
}
/*  Not a pure module */
