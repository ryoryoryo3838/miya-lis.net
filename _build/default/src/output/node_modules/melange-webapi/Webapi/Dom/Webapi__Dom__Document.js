// Generated by Melange

import * as Caml_option from "melange.js/caml_option.js";
import * as Webapi__Dom__DocumentOrShadowRoot from "./Webapi__Dom__DocumentOrShadowRoot.js";
import * as Webapi__Dom__EventTarget from "./Webapi__Dom__EventTarget.js";
import * as Webapi__Dom__Node from "./Webapi__Dom__Node.js";
import * as Webapi__Dom__NonElementParentNode from "./Webapi__Dom__NonElementParentNode.js";
import * as Webapi__Dom__ParentNode from "./Webapi__Dom__ParentNode.js";
import * as Webapi__Dom__Types from "./Webapi__Dom__Types.js";

function Impl(T) {
  const asHtmlDocument = (function (document) {
      return document.doctype.name === "html" ?  document : null;
    }
  );
  const asHtmlDocument$1 = function (self) {
    return Caml_option.null_to_opt(asHtmlDocument(self));
  };
  const ofNode = function (node) {
    if (Webapi__Dom__Node.nodeType(node) === /* Document */ 8) {
      return Caml_option.some(node);
    }
    
  };
  const compatMode = function (self) {
    return Webapi__Dom__Types.decodeCompatMode(self.compatMode);
  };
  const visibilityState = function (self) {
    return Webapi__Dom__Types.decodeVisibilityState(self.visibilityState);
  };
  return {
    asHtmlDocument: asHtmlDocument$1,
    ofNode: ofNode,
    compatMode: compatMode,
    visibilityState: visibilityState
  };
}

const include = Webapi__Dom__Node.Impl({});

Webapi__Dom__EventTarget.Impl({});

Webapi__Dom__NonElementParentNode.Impl({});

Webapi__Dom__DocumentOrShadowRoot.Impl({});

Webapi__Dom__ParentNode.Impl({});

const asHtmlDocument = (function (document) {
      return document.doctype.name === "html" ?  document : null;
    }
);

function asHtmlDocument$1(self) {
  return Caml_option.null_to_opt(asHtmlDocument(self));
}

function ofNode(node) {
  if (Webapi__Dom__Node.nodeType(node) === /* Document */ 8) {
    return Caml_option.some(node);
  }
  
}

function compatMode(self) {
  return Webapi__Dom__Types.decodeCompatMode(self.compatMode);
}

function visibilityState(self) {
  return Webapi__Dom__Types.decodeVisibilityState(self.visibilityState);
}

const nodeType = include.nodeType;

export {
  Impl,
  nodeType,
  asHtmlDocument$1 as asHtmlDocument,
  ofNode,
  compatMode,
  visibilityState,
}
/* include Not a pure module */
