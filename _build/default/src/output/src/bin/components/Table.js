// Generated by Melange

import * as Link from "./Link.js";
import * as R from "../../lib/r/R.js";
import * as Stdlib__Array from "melange/array.js";
import * as Stdlib__List from "melange/list.js";
import * as JsxRuntime from "react/jsx-runtime";

function Table(Props) {
  let thead = Props.thead;
  let tbody = Props.tbody;
  return JsxRuntime.jsx("div", {
    children: JsxRuntime.jsxs("table", {
      children: [
        JsxRuntime.jsx("thead", {
          children: thead,
          className: "position-relative height-auto mb-4 max-lg:mb-[1.25vw] max-md:mb-[5vw] text-left font-sometype_mono border-b-[0.5px] border-[#333]",
          id: "l-directory>table>thead"
        }),
        JsxRuntime.jsx("tbody", {
          children: tbody,
          className: "position-relative height-auto mb-4 max-lg:mb-[1.25vw] max-md:mv-[4vw] text-left font-sometype_mono pl-[5vw]",
          id: "l-directory>table>body"
        })
      ],
      className: "m-0 p-0 border-0 w-full  font-inherit align-middle border-collapse border-spacing-0 md:w-full md:max-w-md",
      id: "l-directory>table"
    }),
    className: "pl-5 pr-5 max-lg:pl-[1.5vw] max-md:pl-0 max-lg:pr-[1.5vw] max-md:pr-0 text-2xl",
    id: "l-directory"
  });
}

function Table$tbody(Props) {
  let lst = Props.lst;
  let url = Props.url;
  return JsxRuntime.jsx(JsxRuntime.Fragment, {
    children: [Stdlib__Array.of_list(Stdlib__List.map((function (param) {
        const index = param[1];
        const path = param[0];
        let tmp;
        if (index) {
          const iconcomp = JsxRuntime.jsx("th", {
            children: JsxRuntime.jsx(Link.make, {
              path: path,
              children: JsxRuntime.jsx("i", {
                className: "pr-[0.1vw] fa-xs text-center " + index.hd
              })
            })
          });
          const othercomp = Stdlib__List.map((function (x) {
            if (url !== undefined) {
              if (x === "-") {
                return JsxRuntime.jsx("th", {
                  children: JsxRuntime.jsx(Link.url, {
                    path: path,
                    children: R.s(x)
                  }),
                  className: "text-center"
                });
              } else {
                return JsxRuntime.jsx("th", {
                  children: JsxRuntime.jsx(Link.url, {
                    path: path,
                    children: R.s(x)
                  })
                });
              }
            } else if (x === "-") {
              return JsxRuntime.jsx("th", {
                children: JsxRuntime.jsx(Link.make, {
                  path: path,
                  children: R.s(x)
                }),
                className: "text-center"
              });
            } else {
              return JsxRuntime.jsx("th", {
                children: JsxRuntime.jsx(Link.make, {
                  path: path,
                  children: R.s(x)
                })
              });
            }
          }), index.tl);
          tmp = Stdlib__Array.of_list({
            hd: iconcomp,
            tl: othercomp
          });
        } else {
          tmp = JsxRuntime.jsx("div", {});
        }
        return JsxRuntime.jsx("tr", {
          children: tmp
        });
      }), lst))]
  });
}

function Table$thead(Props) {
  let index = Props.index;
  return JsxRuntime.jsx(JsxRuntime.Fragment, {
    children: [JsxRuntime.jsx("tr", {
        children: Stdlib__Array.of_list(Stdlib__List.map((function (x) {
          if (x === "Size") {
            return JsxRuntime.jsx("th", {
              children: R.s(x),
              className: "text-center",
              id: x
            });
          } else {
            return JsxRuntime.jsx("th", {
              children: R.s(x),
              id: x
            });
          }
        }), index))
      })]
  });
}

const make = Table;

const tbody = Table$tbody;

const thead = Table$thead;

export {
  make,
  tbody,
  thead,
}
/* Link Not a pure module */
