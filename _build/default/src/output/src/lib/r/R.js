// Generated by Melange

import * as Caml_option from "melange.js/caml_option.js";
import * as React from "reason-react/React.js";
import * as ReactDOM from "reason-react/ReactDOM.js";

function s(prim) {
  return prim;
}

function style(prim0, prim1, prim2, prim3, prim4, prim5, prim6, prim7, prim8, prim9, prim10, prim11, prim12, prim13, prim14, prim15, prim16, prim17, prim18, prim19, prim20, prim21, prim22, prim23, prim24, prim25, prim26, prim27, prim28, prim29, prim30, prim31, prim32, prim33, prim34, prim35, prim36, prim37, prim38, prim39, prim40, prim41, prim42, prim43, prim44, prim45, prim46, prim47, prim48, prim49, prim50, prim51, prim52, prim53, prim54, prim55, prim56, prim57, prim58, prim59, prim60, prim61, prim62, prim63, prim64, prim65, prim66, prim67, prim68, prim69, prim70, prim71, prim72, prim73, prim74, prim75, prim76, prim77, prim78, prim79, prim80, prim81, prim82, prim83, prim84, prim85, prim86, prim87, prim88, prim89, prim90, prim91, prim92, prim93, prim94, prim95, prim96, prim97, prim98, prim99, prim100, prim101, prim102, prim103, prim104, prim105, prim106, prim107, prim108, prim109, prim110, prim111, prim112, prim113, prim114, prim115, prim116, prim117, prim118, prim119, prim120, prim121, prim122, prim123, prim124, prim125, prim126, prim127, prim128, prim129, prim130, prim131, prim132, prim133, prim134, prim135, prim136, prim137, prim138, prim139, prim140, prim141, prim142, prim143, prim144, prim145, prim146, prim147, prim148, prim149, prim150, prim151, prim152, prim153, prim154, prim155, prim156, prim157, prim158, prim159, prim160, prim161, prim162, prim163, prim164, prim165, prim166, prim167, prim168, prim169, prim170, prim171, prim172, prim173, prim174, prim175, prim176, prim177, prim178, prim179, prim180, prim181, prim182, prim183, prim184, prim185, prim186, prim187, prim188, prim189, prim190, prim191, prim192, prim193, prim194, prim195, prim196, prim197, prim198, prim199, prim200, prim201, prim202, prim203, prim204, prim205, prim206, prim207, prim208, prim209, prim210, prim211, prim212, prim213, prim214, prim215, prim216, prim217, prim218, prim219, prim220, prim221, prim222, prim223, prim224, prim225, prim226, prim227, prim228, prim229, prim230, prim231, prim232, prim233, prim234, prim235, prim236, prim237, prim238, prim239, prim240, prim241, prim242, prim243, prim244, prim245, prim246, prim247, prim248, prim249, prim250, prim251, prim252, prim253, prim254, prim255, prim256, prim257, prim258, prim259, prim260, prim261, prim262, prim263, prim264, prim265, prim266, prim267, prim268, prim269, prim270, prim271, prim272, prim273, prim274, prim275, prim276, prim277, prim278, prim279, prim280, prim281, prim282, prim283, prim284, prim285, prim286, prim287, prim288, prim289, prim290, prim291, prim292, prim293, prim294, prim295, prim296, prim297, prim298, prim299, prim300, prim301, prim302, prim303, prim304, prim305, prim306, prim307, prim308, prim309, prim310, prim311, prim312, prim313, prim314, prim315, prim316, prim317, prim318, prim319, prim320, prim321, prim322, prim323, prim324, prim325, prim326, prim327, prim328, prim329, prim330, prim331, prim332, prim333, prim334, prim335, prim336, prim337, prim338, prim339, prim340, prim341, prim342, prim343, prim344, prim345, prim346, prim347, prim348, prim349, prim350) {
  let tmp = {};
  if (prim0 !== undefined) {
    tmp.azimuth = Caml_option.valFromOption(prim0);
  }
  if (prim1 !== undefined) {
    tmp.background = Caml_option.valFromOption(prim1);
  }
  if (prim2 !== undefined) {
    tmp.backgroundAttachment = Caml_option.valFromOption(prim2);
  }
  if (prim3 !== undefined) {
    tmp.backgroundColor = Caml_option.valFromOption(prim3);
  }
  if (prim4 !== undefined) {
    tmp.backgroundImage = Caml_option.valFromOption(prim4);
  }
  if (prim5 !== undefined) {
    tmp.backgroundPosition = Caml_option.valFromOption(prim5);
  }
  if (prim6 !== undefined) {
    tmp.backgroundRepeat = Caml_option.valFromOption(prim6);
  }
  if (prim7 !== undefined) {
    tmp.border = Caml_option.valFromOption(prim7);
  }
  if (prim8 !== undefined) {
    tmp.borderCollapse = Caml_option.valFromOption(prim8);
  }
  if (prim9 !== undefined) {
    tmp.borderColor = Caml_option.valFromOption(prim9);
  }
  if (prim10 !== undefined) {
    tmp.borderSpacing = Caml_option.valFromOption(prim10);
  }
  if (prim11 !== undefined) {
    tmp.borderStyle = Caml_option.valFromOption(prim11);
  }
  if (prim12 !== undefined) {
    tmp.borderTop = Caml_option.valFromOption(prim12);
  }
  if (prim13 !== undefined) {
    tmp.borderRight = Caml_option.valFromOption(prim13);
  }
  if (prim14 !== undefined) {
    tmp.borderBottom = Caml_option.valFromOption(prim14);
  }
  if (prim15 !== undefined) {
    tmp.borderLeft = Caml_option.valFromOption(prim15);
  }
  if (prim16 !== undefined) {
    tmp.borderTopColor = Caml_option.valFromOption(prim16);
  }
  if (prim17 !== undefined) {
    tmp.borderRightColor = Caml_option.valFromOption(prim17);
  }
  if (prim18 !== undefined) {
    tmp.borderBottomColor = Caml_option.valFromOption(prim18);
  }
  if (prim19 !== undefined) {
    tmp.borderLeftColor = Caml_option.valFromOption(prim19);
  }
  if (prim20 !== undefined) {
    tmp.borderTopStyle = Caml_option.valFromOption(prim20);
  }
  if (prim21 !== undefined) {
    tmp.borderRightStyle = Caml_option.valFromOption(prim21);
  }
  if (prim22 !== undefined) {
    tmp.borderBottomStyle = Caml_option.valFromOption(prim22);
  }
  if (prim23 !== undefined) {
    tmp.borderLeftStyle = Caml_option.valFromOption(prim23);
  }
  if (prim24 !== undefined) {
    tmp.borderTopWidth = Caml_option.valFromOption(prim24);
  }
  if (prim25 !== undefined) {
    tmp.borderRightWidth = Caml_option.valFromOption(prim25);
  }
  if (prim26 !== undefined) {
    tmp.borderBottomWidth = Caml_option.valFromOption(prim26);
  }
  if (prim27 !== undefined) {
    tmp.borderLeftWidth = Caml_option.valFromOption(prim27);
  }
  if (prim28 !== undefined) {
    tmp.borderWidth = Caml_option.valFromOption(prim28);
  }
  if (prim29 !== undefined) {
    tmp.bottom = Caml_option.valFromOption(prim29);
  }
  if (prim30 !== undefined) {
    tmp.captionSide = Caml_option.valFromOption(prim30);
  }
  if (prim31 !== undefined) {
    tmp.clear = Caml_option.valFromOption(prim31);
  }
  if (prim32 !== undefined) {
    tmp.clip = Caml_option.valFromOption(prim32);
  }
  if (prim33 !== undefined) {
    tmp.color = Caml_option.valFromOption(prim33);
  }
  if (prim34 !== undefined) {
    tmp.content = Caml_option.valFromOption(prim34);
  }
  if (prim35 !== undefined) {
    tmp.counterIncrement = Caml_option.valFromOption(prim35);
  }
  if (prim36 !== undefined) {
    tmp.counterReset = Caml_option.valFromOption(prim36);
  }
  if (prim37 !== undefined) {
    tmp.cue = Caml_option.valFromOption(prim37);
  }
  if (prim38 !== undefined) {
    tmp.cueAfter = Caml_option.valFromOption(prim38);
  }
  if (prim39 !== undefined) {
    tmp.cueBefore = Caml_option.valFromOption(prim39);
  }
  if (prim40 !== undefined) {
    tmp.cursor = Caml_option.valFromOption(prim40);
  }
  if (prim41 !== undefined) {
    tmp.direction = Caml_option.valFromOption(prim41);
  }
  if (prim42 !== undefined) {
    tmp.display = Caml_option.valFromOption(prim42);
  }
  if (prim43 !== undefined) {
    tmp.elevation = Caml_option.valFromOption(prim43);
  }
  if (prim44 !== undefined) {
    tmp.emptyCells = Caml_option.valFromOption(prim44);
  }
  if (prim45 !== undefined) {
    tmp.float = Caml_option.valFromOption(prim45);
  }
  if (prim46 !== undefined) {
    tmp.font = Caml_option.valFromOption(prim46);
  }
  if (prim47 !== undefined) {
    tmp.fontFamily = Caml_option.valFromOption(prim47);
  }
  if (prim48 !== undefined) {
    tmp.fontSize = Caml_option.valFromOption(prim48);
  }
  if (prim49 !== undefined) {
    tmp.fontSizeAdjust = Caml_option.valFromOption(prim49);
  }
  if (prim50 !== undefined) {
    tmp.fontStretch = Caml_option.valFromOption(prim50);
  }
  if (prim51 !== undefined) {
    tmp.fontStyle = Caml_option.valFromOption(prim51);
  }
  if (prim52 !== undefined) {
    tmp.fontVariant = Caml_option.valFromOption(prim52);
  }
  if (prim53 !== undefined) {
    tmp.fontWeight = Caml_option.valFromOption(prim53);
  }
  if (prim54 !== undefined) {
    tmp.height = Caml_option.valFromOption(prim54);
  }
  if (prim55 !== undefined) {
    tmp.left = Caml_option.valFromOption(prim55);
  }
  if (prim56 !== undefined) {
    tmp.letterSpacing = Caml_option.valFromOption(prim56);
  }
  if (prim57 !== undefined) {
    tmp.lineHeight = Caml_option.valFromOption(prim57);
  }
  if (prim58 !== undefined) {
    tmp.listStyle = Caml_option.valFromOption(prim58);
  }
  if (prim59 !== undefined) {
    tmp.listStyleImage = Caml_option.valFromOption(prim59);
  }
  if (prim60 !== undefined) {
    tmp.listStylePosition = Caml_option.valFromOption(prim60);
  }
  if (prim61 !== undefined) {
    tmp.listStyleType = Caml_option.valFromOption(prim61);
  }
  if (prim62 !== undefined) {
    tmp.margin = Caml_option.valFromOption(prim62);
  }
  if (prim63 !== undefined) {
    tmp.marginTop = Caml_option.valFromOption(prim63);
  }
  if (prim64 !== undefined) {
    tmp.marginRight = Caml_option.valFromOption(prim64);
  }
  if (prim65 !== undefined) {
    tmp.marginBottom = Caml_option.valFromOption(prim65);
  }
  if (prim66 !== undefined) {
    tmp.marginLeft = Caml_option.valFromOption(prim66);
  }
  if (prim67 !== undefined) {
    tmp.markerOffset = Caml_option.valFromOption(prim67);
  }
  if (prim68 !== undefined) {
    tmp.marks = Caml_option.valFromOption(prim68);
  }
  if (prim69 !== undefined) {
    tmp.maxHeight = Caml_option.valFromOption(prim69);
  }
  if (prim70 !== undefined) {
    tmp.maxWidth = Caml_option.valFromOption(prim70);
  }
  if (prim71 !== undefined) {
    tmp.minHeight = Caml_option.valFromOption(prim71);
  }
  if (prim72 !== undefined) {
    tmp.minWidth = Caml_option.valFromOption(prim72);
  }
  if (prim73 !== undefined) {
    tmp.orphans = Caml_option.valFromOption(prim73);
  }
  if (prim74 !== undefined) {
    tmp.outline = Caml_option.valFromOption(prim74);
  }
  if (prim75 !== undefined) {
    tmp.outlineColor = Caml_option.valFromOption(prim75);
  }
  if (prim76 !== undefined) {
    tmp.outlineStyle = Caml_option.valFromOption(prim76);
  }
  if (prim77 !== undefined) {
    tmp.outlineWidth = Caml_option.valFromOption(prim77);
  }
  if (prim78 !== undefined) {
    tmp.overflow = Caml_option.valFromOption(prim78);
  }
  if (prim79 !== undefined) {
    tmp.overflowX = Caml_option.valFromOption(prim79);
  }
  if (prim80 !== undefined) {
    tmp.overflowY = Caml_option.valFromOption(prim80);
  }
  if (prim81 !== undefined) {
    tmp.padding = Caml_option.valFromOption(prim81);
  }
  if (prim82 !== undefined) {
    tmp.paddingTop = Caml_option.valFromOption(prim82);
  }
  if (prim83 !== undefined) {
    tmp.paddingRight = Caml_option.valFromOption(prim83);
  }
  if (prim84 !== undefined) {
    tmp.paddingBottom = Caml_option.valFromOption(prim84);
  }
  if (prim85 !== undefined) {
    tmp.paddingLeft = Caml_option.valFromOption(prim85);
  }
  if (prim86 !== undefined) {
    tmp.page = Caml_option.valFromOption(prim86);
  }
  if (prim87 !== undefined) {
    tmp.pageBreakAfter = Caml_option.valFromOption(prim87);
  }
  if (prim88 !== undefined) {
    tmp.pageBreakBefore = Caml_option.valFromOption(prim88);
  }
  if (prim89 !== undefined) {
    tmp.pageBreakInside = Caml_option.valFromOption(prim89);
  }
  if (prim90 !== undefined) {
    tmp.pause = Caml_option.valFromOption(prim90);
  }
  if (prim91 !== undefined) {
    tmp.pauseAfter = Caml_option.valFromOption(prim91);
  }
  if (prim92 !== undefined) {
    tmp.pauseBefore = Caml_option.valFromOption(prim92);
  }
  if (prim93 !== undefined) {
    tmp.pitch = Caml_option.valFromOption(prim93);
  }
  if (prim94 !== undefined) {
    tmp.pitchRange = Caml_option.valFromOption(prim94);
  }
  if (prim95 !== undefined) {
    tmp.playDuring = Caml_option.valFromOption(prim95);
  }
  if (prim96 !== undefined) {
    tmp.position = Caml_option.valFromOption(prim96);
  }
  if (prim97 !== undefined) {
    tmp.quotes = Caml_option.valFromOption(prim97);
  }
  if (prim98 !== undefined) {
    tmp.richness = Caml_option.valFromOption(prim98);
  }
  if (prim99 !== undefined) {
    tmp.right = Caml_option.valFromOption(prim99);
  }
  if (prim100 !== undefined) {
    tmp.size = Caml_option.valFromOption(prim100);
  }
  if (prim101 !== undefined) {
    tmp.speak = Caml_option.valFromOption(prim101);
  }
  if (prim102 !== undefined) {
    tmp.speakHeader = Caml_option.valFromOption(prim102);
  }
  if (prim103 !== undefined) {
    tmp.speakNumeral = Caml_option.valFromOption(prim103);
  }
  if (prim104 !== undefined) {
    tmp.speakPunctuation = Caml_option.valFromOption(prim104);
  }
  if (prim105 !== undefined) {
    tmp.speechRate = Caml_option.valFromOption(prim105);
  }
  if (prim106 !== undefined) {
    tmp.stress = Caml_option.valFromOption(prim106);
  }
  if (prim107 !== undefined) {
    tmp.tableLayout = Caml_option.valFromOption(prim107);
  }
  if (prim108 !== undefined) {
    tmp.textAlign = Caml_option.valFromOption(prim108);
  }
  if (prim109 !== undefined) {
    tmp.textDecoration = Caml_option.valFromOption(prim109);
  }
  if (prim110 !== undefined) {
    tmp.textIndent = Caml_option.valFromOption(prim110);
  }
  if (prim111 !== undefined) {
    tmp.textShadow = Caml_option.valFromOption(prim111);
  }
  if (prim112 !== undefined) {
    tmp.textTransform = Caml_option.valFromOption(prim112);
  }
  if (prim113 !== undefined) {
    tmp.top = Caml_option.valFromOption(prim113);
  }
  if (prim114 !== undefined) {
    tmp.unicodeBidi = Caml_option.valFromOption(prim114);
  }
  if (prim115 !== undefined) {
    tmp.verticalAlign = Caml_option.valFromOption(prim115);
  }
  if (prim116 !== undefined) {
    tmp.visibility = Caml_option.valFromOption(prim116);
  }
  if (prim117 !== undefined) {
    tmp.voiceFamily = Caml_option.valFromOption(prim117);
  }
  if (prim118 !== undefined) {
    tmp.volume = Caml_option.valFromOption(prim118);
  }
  if (prim119 !== undefined) {
    tmp.whiteSpace = Caml_option.valFromOption(prim119);
  }
  if (prim120 !== undefined) {
    tmp.widows = Caml_option.valFromOption(prim120);
  }
  if (prim121 !== undefined) {
    tmp.width = Caml_option.valFromOption(prim121);
  }
  if (prim122 !== undefined) {
    tmp.wordSpacing = Caml_option.valFromOption(prim122);
  }
  if (prim123 !== undefined) {
    tmp.zIndex = Caml_option.valFromOption(prim123);
  }
  if (prim124 !== undefined) {
    tmp.opacity = Caml_option.valFromOption(prim124);
  }
  if (prim125 !== undefined) {
    tmp.backgroundOrigin = Caml_option.valFromOption(prim125);
  }
  if (prim126 !== undefined) {
    tmp.backgroundSize = Caml_option.valFromOption(prim126);
  }
  if (prim127 !== undefined) {
    tmp.backgroundClip = Caml_option.valFromOption(prim127);
  }
  if (prim128 !== undefined) {
    tmp.borderRadius = Caml_option.valFromOption(prim128);
  }
  if (prim129 !== undefined) {
    tmp.borderTopLeftRadius = Caml_option.valFromOption(prim129);
  }
  if (prim130 !== undefined) {
    tmp.borderTopRightRadius = Caml_option.valFromOption(prim130);
  }
  if (prim131 !== undefined) {
    tmp.borderBottomLeftRadius = Caml_option.valFromOption(prim131);
  }
  if (prim132 !== undefined) {
    tmp.borderBottomRightRadius = Caml_option.valFromOption(prim132);
  }
  if (prim133 !== undefined) {
    tmp.borderImage = Caml_option.valFromOption(prim133);
  }
  if (prim134 !== undefined) {
    tmp.borderImageSource = Caml_option.valFromOption(prim134);
  }
  if (prim135 !== undefined) {
    tmp.borderImageSlice = Caml_option.valFromOption(prim135);
  }
  if (prim136 !== undefined) {
    tmp.borderImageWidth = Caml_option.valFromOption(prim136);
  }
  if (prim137 !== undefined) {
    tmp.borderImageOutset = Caml_option.valFromOption(prim137);
  }
  if (prim138 !== undefined) {
    tmp.borderImageRepeat = Caml_option.valFromOption(prim138);
  }
  if (prim139 !== undefined) {
    tmp.boxShadow = Caml_option.valFromOption(prim139);
  }
  if (prim140 !== undefined) {
    tmp.columns = Caml_option.valFromOption(prim140);
  }
  if (prim141 !== undefined) {
    tmp.columnCount = Caml_option.valFromOption(prim141);
  }
  if (prim142 !== undefined) {
    tmp.columnFill = Caml_option.valFromOption(prim142);
  }
  if (prim143 !== undefined) {
    tmp.columnGap = Caml_option.valFromOption(prim143);
  }
  if (prim144 !== undefined) {
    tmp.columnRule = Caml_option.valFromOption(prim144);
  }
  if (prim145 !== undefined) {
    tmp.columnRuleColor = Caml_option.valFromOption(prim145);
  }
  if (prim146 !== undefined) {
    tmp.columnRuleStyle = Caml_option.valFromOption(prim146);
  }
  if (prim147 !== undefined) {
    tmp.columnRuleWidth = Caml_option.valFromOption(prim147);
  }
  if (prim148 !== undefined) {
    tmp.columnSpan = Caml_option.valFromOption(prim148);
  }
  if (prim149 !== undefined) {
    tmp.columnWidth = Caml_option.valFromOption(prim149);
  }
  if (prim150 !== undefined) {
    tmp.breakAfter = Caml_option.valFromOption(prim150);
  }
  if (prim151 !== undefined) {
    tmp.breakBefore = Caml_option.valFromOption(prim151);
  }
  if (prim152 !== undefined) {
    tmp.breakInside = Caml_option.valFromOption(prim152);
  }
  if (prim153 !== undefined) {
    tmp.rest = Caml_option.valFromOption(prim153);
  }
  if (prim154 !== undefined) {
    tmp.restAfter = Caml_option.valFromOption(prim154);
  }
  if (prim155 !== undefined) {
    tmp.restBefore = Caml_option.valFromOption(prim155);
  }
  if (prim156 !== undefined) {
    tmp.speakAs = Caml_option.valFromOption(prim156);
  }
  if (prim157 !== undefined) {
    tmp.voiceBalance = Caml_option.valFromOption(prim157);
  }
  if (prim158 !== undefined) {
    tmp.voiceDuration = Caml_option.valFromOption(prim158);
  }
  if (prim159 !== undefined) {
    tmp.voicePitch = Caml_option.valFromOption(prim159);
  }
  if (prim160 !== undefined) {
    tmp.voiceRange = Caml_option.valFromOption(prim160);
  }
  if (prim161 !== undefined) {
    tmp.voiceRate = Caml_option.valFromOption(prim161);
  }
  if (prim162 !== undefined) {
    tmp.voiceStress = Caml_option.valFromOption(prim162);
  }
  if (prim163 !== undefined) {
    tmp.voiceVolume = Caml_option.valFromOption(prim163);
  }
  if (prim164 !== undefined) {
    tmp.objectFit = Caml_option.valFromOption(prim164);
  }
  if (prim165 !== undefined) {
    tmp.objectPosition = Caml_option.valFromOption(prim165);
  }
  if (prim166 !== undefined) {
    tmp.imageResolution = Caml_option.valFromOption(prim166);
  }
  if (prim167 !== undefined) {
    tmp.imageOrientation = Caml_option.valFromOption(prim167);
  }
  if (prim168 !== undefined) {
    tmp.alignContent = Caml_option.valFromOption(prim168);
  }
  if (prim169 !== undefined) {
    tmp.alignItems = Caml_option.valFromOption(prim169);
  }
  if (prim170 !== undefined) {
    tmp.alignSelf = Caml_option.valFromOption(prim170);
  }
  if (prim171 !== undefined) {
    tmp.flex = Caml_option.valFromOption(prim171);
  }
  if (prim172 !== undefined) {
    tmp.flexBasis = Caml_option.valFromOption(prim172);
  }
  if (prim173 !== undefined) {
    tmp.flexDirection = Caml_option.valFromOption(prim173);
  }
  if (prim174 !== undefined) {
    tmp.flexFlow = Caml_option.valFromOption(prim174);
  }
  if (prim175 !== undefined) {
    tmp.flexGrow = Caml_option.valFromOption(prim175);
  }
  if (prim176 !== undefined) {
    tmp.flexShrink = Caml_option.valFromOption(prim176);
  }
  if (prim177 !== undefined) {
    tmp.flexWrap = Caml_option.valFromOption(prim177);
  }
  if (prim178 !== undefined) {
    tmp.justifyContent = Caml_option.valFromOption(prim178);
  }
  if (prim179 !== undefined) {
    tmp.order = Caml_option.valFromOption(prim179);
  }
  if (prim180 !== undefined) {
    tmp.textDecorationColor = Caml_option.valFromOption(prim180);
  }
  if (prim181 !== undefined) {
    tmp.textDecorationLine = Caml_option.valFromOption(prim181);
  }
  if (prim182 !== undefined) {
    tmp.textDecorationSkip = Caml_option.valFromOption(prim182);
  }
  if (prim183 !== undefined) {
    tmp.textDecorationStyle = Caml_option.valFromOption(prim183);
  }
  if (prim184 !== undefined) {
    tmp.textEmphasis = Caml_option.valFromOption(prim184);
  }
  if (prim185 !== undefined) {
    tmp.textEmphasisColor = Caml_option.valFromOption(prim185);
  }
  if (prim186 !== undefined) {
    tmp.textEmphasisPosition = Caml_option.valFromOption(prim186);
  }
  if (prim187 !== undefined) {
    tmp.textEmphasisStyle = Caml_option.valFromOption(prim187);
  }
  if (prim188 !== undefined) {
    tmp.textUnderlinePosition = Caml_option.valFromOption(prim188);
  }
  if (prim189 !== undefined) {
    tmp.fontFeatureSettings = Caml_option.valFromOption(prim189);
  }
  if (prim190 !== undefined) {
    tmp.fontKerning = Caml_option.valFromOption(prim190);
  }
  if (prim191 !== undefined) {
    tmp.fontLanguageOverride = Caml_option.valFromOption(prim191);
  }
  if (prim192 !== undefined) {
    tmp.fontSynthesis = Caml_option.valFromOption(prim192);
  }
  if (prim193 !== undefined) {
    tmp.forntVariantAlternates = Caml_option.valFromOption(prim193);
  }
  if (prim194 !== undefined) {
    tmp.fontVariantCaps = Caml_option.valFromOption(prim194);
  }
  if (prim195 !== undefined) {
    tmp.fontVariantEastAsian = Caml_option.valFromOption(prim195);
  }
  if (prim196 !== undefined) {
    tmp.fontVariantLigatures = Caml_option.valFromOption(prim196);
  }
  if (prim197 !== undefined) {
    tmp.fontVariantNumeric = Caml_option.valFromOption(prim197);
  }
  if (prim198 !== undefined) {
    tmp.fontVariantPosition = Caml_option.valFromOption(prim198);
  }
  if (prim199 !== undefined) {
    tmp.all = Caml_option.valFromOption(prim199);
  }
  if (prim200 !== undefined) {
    tmp.glyphOrientationVertical = Caml_option.valFromOption(prim200);
  }
  if (prim201 !== undefined) {
    tmp.textCombineUpright = Caml_option.valFromOption(prim201);
  }
  if (prim202 !== undefined) {
    tmp.textOrientation = Caml_option.valFromOption(prim202);
  }
  if (prim203 !== undefined) {
    tmp.writingMode = Caml_option.valFromOption(prim203);
  }
  if (prim204 !== undefined) {
    tmp.shapeImageThreshold = Caml_option.valFromOption(prim204);
  }
  if (prim205 !== undefined) {
    tmp.shapeMargin = Caml_option.valFromOption(prim205);
  }
  if (prim206 !== undefined) {
    tmp.shapeOutside = Caml_option.valFromOption(prim206);
  }
  if (prim207 !== undefined) {
    tmp.clipPath = Caml_option.valFromOption(prim207);
  }
  if (prim208 !== undefined) {
    tmp.clipRule = Caml_option.valFromOption(prim208);
  }
  if (prim209 !== undefined) {
    tmp.mask = Caml_option.valFromOption(prim209);
  }
  if (prim210 !== undefined) {
    tmp.maskBorder = Caml_option.valFromOption(prim210);
  }
  if (prim211 !== undefined) {
    tmp.maskBorderMode = Caml_option.valFromOption(prim211);
  }
  if (prim212 !== undefined) {
    tmp.maskBorderOutset = Caml_option.valFromOption(prim212);
  }
  if (prim213 !== undefined) {
    tmp.maskBorderRepeat = Caml_option.valFromOption(prim213);
  }
  if (prim214 !== undefined) {
    tmp.maskBorderSlice = Caml_option.valFromOption(prim214);
  }
  if (prim215 !== undefined) {
    tmp.maskBorderSource = Caml_option.valFromOption(prim215);
  }
  if (prim216 !== undefined) {
    tmp.maskBorderWidth = Caml_option.valFromOption(prim216);
  }
  if (prim217 !== undefined) {
    tmp.maskClip = Caml_option.valFromOption(prim217);
  }
  if (prim218 !== undefined) {
    tmp.maskComposite = Caml_option.valFromOption(prim218);
  }
  if (prim219 !== undefined) {
    tmp.maskImage = Caml_option.valFromOption(prim219);
  }
  if (prim220 !== undefined) {
    tmp.maskMode = Caml_option.valFromOption(prim220);
  }
  if (prim221 !== undefined) {
    tmp.maskOrigin = Caml_option.valFromOption(prim221);
  }
  if (prim222 !== undefined) {
    tmp.maskPosition = Caml_option.valFromOption(prim222);
  }
  if (prim223 !== undefined) {
    tmp.maskRepeat = Caml_option.valFromOption(prim223);
  }
  if (prim224 !== undefined) {
    tmp.maskSize = Caml_option.valFromOption(prim224);
  }
  if (prim225 !== undefined) {
    tmp.maskType = Caml_option.valFromOption(prim225);
  }
  if (prim226 !== undefined) {
    tmp.backgroundBlendMode = Caml_option.valFromOption(prim226);
  }
  if (prim227 !== undefined) {
    tmp.isolation = Caml_option.valFromOption(prim227);
  }
  if (prim228 !== undefined) {
    tmp.mixBlendMode = Caml_option.valFromOption(prim228);
  }
  if (prim229 !== undefined) {
    tmp.boxDecorationBreak = Caml_option.valFromOption(prim229);
  }
  if (prim230 !== undefined) {
    tmp.boxSizing = Caml_option.valFromOption(prim230);
  }
  if (prim231 !== undefined) {
    tmp.caretColor = Caml_option.valFromOption(prim231);
  }
  if (prim232 !== undefined) {
    tmp.navDown = Caml_option.valFromOption(prim232);
  }
  if (prim233 !== undefined) {
    tmp.navLeft = Caml_option.valFromOption(prim233);
  }
  if (prim234 !== undefined) {
    tmp.navRight = Caml_option.valFromOption(prim234);
  }
  if (prim235 !== undefined) {
    tmp.navUp = Caml_option.valFromOption(prim235);
  }
  if (prim236 !== undefined) {
    tmp.outlineOffset = Caml_option.valFromOption(prim236);
  }
  if (prim237 !== undefined) {
    tmp.resize = Caml_option.valFromOption(prim237);
  }
  if (prim238 !== undefined) {
    tmp.textOverflow = Caml_option.valFromOption(prim238);
  }
  if (prim239 !== undefined) {
    tmp.grid = Caml_option.valFromOption(prim239);
  }
  if (prim240 !== undefined) {
    tmp.gridArea = Caml_option.valFromOption(prim240);
  }
  if (prim241 !== undefined) {
    tmp.gridAutoColumns = Caml_option.valFromOption(prim241);
  }
  if (prim242 !== undefined) {
    tmp.gridAutoFlow = Caml_option.valFromOption(prim242);
  }
  if (prim243 !== undefined) {
    tmp.gridAutoRows = Caml_option.valFromOption(prim243);
  }
  if (prim244 !== undefined) {
    tmp.gridColumn = Caml_option.valFromOption(prim244);
  }
  if (prim245 !== undefined) {
    tmp.gridColumnEnd = Caml_option.valFromOption(prim245);
  }
  if (prim246 !== undefined) {
    tmp.gridColumnGap = Caml_option.valFromOption(prim246);
  }
  if (prim247 !== undefined) {
    tmp.gridColumnStart = Caml_option.valFromOption(prim247);
  }
  if (prim248 !== undefined) {
    tmp.gridGap = Caml_option.valFromOption(prim248);
  }
  if (prim249 !== undefined) {
    tmp.gridRow = Caml_option.valFromOption(prim249);
  }
  if (prim250 !== undefined) {
    tmp.gridRowEnd = Caml_option.valFromOption(prim250);
  }
  if (prim251 !== undefined) {
    tmp.gridRowGap = Caml_option.valFromOption(prim251);
  }
  if (prim252 !== undefined) {
    tmp.gridRowStart = Caml_option.valFromOption(prim252);
  }
  if (prim253 !== undefined) {
    tmp.gridTemplate = Caml_option.valFromOption(prim253);
  }
  if (prim254 !== undefined) {
    tmp.gridTemplateAreas = Caml_option.valFromOption(prim254);
  }
  if (prim255 !== undefined) {
    tmp.gridTemplateColumns = Caml_option.valFromOption(prim255);
  }
  if (prim256 !== undefined) {
    tmp.gridTemplateRows = Caml_option.valFromOption(prim256);
  }
  if (prim257 !== undefined) {
    tmp.willChange = Caml_option.valFromOption(prim257);
  }
  if (prim258 !== undefined) {
    tmp.hangingPunctuation = Caml_option.valFromOption(prim258);
  }
  if (prim259 !== undefined) {
    tmp.hyphens = Caml_option.valFromOption(prim259);
  }
  if (prim260 !== undefined) {
    tmp.lineBreak = Caml_option.valFromOption(prim260);
  }
  if (prim261 !== undefined) {
    tmp.overflowWrap = Caml_option.valFromOption(prim261);
  }
  if (prim262 !== undefined) {
    tmp.tabSize = Caml_option.valFromOption(prim262);
  }
  if (prim263 !== undefined) {
    tmp.textAlignLast = Caml_option.valFromOption(prim263);
  }
  if (prim264 !== undefined) {
    tmp.textJustify = Caml_option.valFromOption(prim264);
  }
  if (prim265 !== undefined) {
    tmp.wordBreak = Caml_option.valFromOption(prim265);
  }
  if (prim266 !== undefined) {
    tmp.wordWrap = Caml_option.valFromOption(prim266);
  }
  if (prim267 !== undefined) {
    tmp.animation = Caml_option.valFromOption(prim267);
  }
  if (prim268 !== undefined) {
    tmp.animationDelay = Caml_option.valFromOption(prim268);
  }
  if (prim269 !== undefined) {
    tmp.animationDirection = Caml_option.valFromOption(prim269);
  }
  if (prim270 !== undefined) {
    tmp.animationDuration = Caml_option.valFromOption(prim270);
  }
  if (prim271 !== undefined) {
    tmp.animationFillMode = Caml_option.valFromOption(prim271);
  }
  if (prim272 !== undefined) {
    tmp.animationIterationCount = Caml_option.valFromOption(prim272);
  }
  if (prim273 !== undefined) {
    tmp.animationName = Caml_option.valFromOption(prim273);
  }
  if (prim274 !== undefined) {
    tmp.animationPlayState = Caml_option.valFromOption(prim274);
  }
  if (prim275 !== undefined) {
    tmp.animationTimingFunction = Caml_option.valFromOption(prim275);
  }
  if (prim276 !== undefined) {
    tmp.transition = Caml_option.valFromOption(prim276);
  }
  if (prim277 !== undefined) {
    tmp.transitionDelay = Caml_option.valFromOption(prim277);
  }
  if (prim278 !== undefined) {
    tmp.transitionDuration = Caml_option.valFromOption(prim278);
  }
  if (prim279 !== undefined) {
    tmp.transitionProperty = Caml_option.valFromOption(prim279);
  }
  if (prim280 !== undefined) {
    tmp.transitionTimingFunction = Caml_option.valFromOption(prim280);
  }
  if (prim281 !== undefined) {
    tmp.backfaceVisibility = Caml_option.valFromOption(prim281);
  }
  if (prim282 !== undefined) {
    tmp.perspective = Caml_option.valFromOption(prim282);
  }
  if (prim283 !== undefined) {
    tmp.perspectiveOrigin = Caml_option.valFromOption(prim283);
  }
  if (prim284 !== undefined) {
    tmp.transform = Caml_option.valFromOption(prim284);
  }
  if (prim285 !== undefined) {
    tmp.transformOrigin = Caml_option.valFromOption(prim285);
  }
  if (prim286 !== undefined) {
    tmp.transformStyle = Caml_option.valFromOption(prim286);
  }
  if (prim287 !== undefined) {
    tmp.justifyItems = Caml_option.valFromOption(prim287);
  }
  if (prim288 !== undefined) {
    tmp.justifySelf = Caml_option.valFromOption(prim288);
  }
  if (prim289 !== undefined) {
    tmp.placeContent = Caml_option.valFromOption(prim289);
  }
  if (prim290 !== undefined) {
    tmp.placeItems = Caml_option.valFromOption(prim290);
  }
  if (prim291 !== undefined) {
    tmp.placeSelf = Caml_option.valFromOption(prim291);
  }
  if (prim292 !== undefined) {
    tmp.appearance = Caml_option.valFromOption(prim292);
  }
  if (prim293 !== undefined) {
    tmp.caret = Caml_option.valFromOption(prim293);
  }
  if (prim294 !== undefined) {
    tmp.caretAnimation = Caml_option.valFromOption(prim294);
  }
  if (prim295 !== undefined) {
    tmp.caretShape = Caml_option.valFromOption(prim295);
  }
  if (prim296 !== undefined) {
    tmp.userSelect = Caml_option.valFromOption(prim296);
  }
  if (prim297 !== undefined) {
    tmp.maxLines = Caml_option.valFromOption(prim297);
  }
  if (prim298 !== undefined) {
    tmp.marqueeDirection = Caml_option.valFromOption(prim298);
  }
  if (prim299 !== undefined) {
    tmp.marqueeLoop = Caml_option.valFromOption(prim299);
  }
  if (prim300 !== undefined) {
    tmp.marqueeSpeed = Caml_option.valFromOption(prim300);
  }
  if (prim301 !== undefined) {
    tmp.marqueeStyle = Caml_option.valFromOption(prim301);
  }
  if (prim302 !== undefined) {
    tmp.overflowStyle = Caml_option.valFromOption(prim302);
  }
  if (prim303 !== undefined) {
    tmp.rotation = Caml_option.valFromOption(prim303);
  }
  if (prim304 !== undefined) {
    tmp.rotationPoint = Caml_option.valFromOption(prim304);
  }
  if (prim305 !== undefined) {
    tmp.alignmentBaseline = Caml_option.valFromOption(prim305);
  }
  if (prim306 !== undefined) {
    tmp.baselineShift = Caml_option.valFromOption(prim306);
  }
  if (prim307 !== undefined) {
    tmp.clip = Caml_option.valFromOption(prim307);
  }
  if (prim308 !== undefined) {
    tmp.clipPath = Caml_option.valFromOption(prim308);
  }
  if (prim309 !== undefined) {
    tmp.clipRule = Caml_option.valFromOption(prim309);
  }
  if (prim310 !== undefined) {
    tmp.colorInterpolation = Caml_option.valFromOption(prim310);
  }
  if (prim311 !== undefined) {
    tmp.colorInterpolationFilters = Caml_option.valFromOption(prim311);
  }
  if (prim312 !== undefined) {
    tmp.colorProfile = Caml_option.valFromOption(prim312);
  }
  if (prim313 !== undefined) {
    tmp.colorRendering = Caml_option.valFromOption(prim313);
  }
  if (prim314 !== undefined) {
    tmp.cursor = Caml_option.valFromOption(prim314);
  }
  if (prim315 !== undefined) {
    tmp.dominantBaseline = Caml_option.valFromOption(prim315);
  }
  if (prim316 !== undefined) {
    tmp.fill = Caml_option.valFromOption(prim316);
  }
  if (prim317 !== undefined) {
    tmp.fillOpacity = Caml_option.valFromOption(prim317);
  }
  if (prim318 !== undefined) {
    tmp.fillRule = Caml_option.valFromOption(prim318);
  }
  if (prim319 !== undefined) {
    tmp.filter = Caml_option.valFromOption(prim319);
  }
  if (prim320 !== undefined) {
    tmp.floodColor = Caml_option.valFromOption(prim320);
  }
  if (prim321 !== undefined) {
    tmp.floodOpacity = Caml_option.valFromOption(prim321);
  }
  if (prim322 !== undefined) {
    tmp.glyphOrientationHorizontal = Caml_option.valFromOption(prim322);
  }
  if (prim323 !== undefined) {
    tmp.glyphOrientationVertical = Caml_option.valFromOption(prim323);
  }
  if (prim324 !== undefined) {
    tmp.imageRendering = Caml_option.valFromOption(prim324);
  }
  if (prim325 !== undefined) {
    tmp.kerning = Caml_option.valFromOption(prim325);
  }
  if (prim326 !== undefined) {
    tmp.lightingColor = Caml_option.valFromOption(prim326);
  }
  if (prim327 !== undefined) {
    tmp.markerEnd = Caml_option.valFromOption(prim327);
  }
  if (prim328 !== undefined) {
    tmp.markerMid = Caml_option.valFromOption(prim328);
  }
  if (prim329 !== undefined) {
    tmp.markerStart = Caml_option.valFromOption(prim329);
  }
  if (prim330 !== undefined) {
    tmp.pointerEvents = Caml_option.valFromOption(prim330);
  }
  if (prim331 !== undefined) {
    tmp.shapeRendering = Caml_option.valFromOption(prim331);
  }
  if (prim332 !== undefined) {
    tmp.stopColor = Caml_option.valFromOption(prim332);
  }
  if (prim333 !== undefined) {
    tmp.stopOpacity = Caml_option.valFromOption(prim333);
  }
  if (prim334 !== undefined) {
    tmp.stroke = Caml_option.valFromOption(prim334);
  }
  if (prim335 !== undefined) {
    tmp.strokeDasharray = Caml_option.valFromOption(prim335);
  }
  if (prim336 !== undefined) {
    tmp.strokeDashoffset = Caml_option.valFromOption(prim336);
  }
  if (prim337 !== undefined) {
    tmp.strokeLinecap = Caml_option.valFromOption(prim337);
  }
  if (prim338 !== undefined) {
    tmp.strokeLinejoin = Caml_option.valFromOption(prim338);
  }
  if (prim339 !== undefined) {
    tmp.strokeMiterlimit = Caml_option.valFromOption(prim339);
  }
  if (prim340 !== undefined) {
    tmp.strokeOpacity = Caml_option.valFromOption(prim340);
  }
  if (prim341 !== undefined) {
    tmp.strokeWidth = Caml_option.valFromOption(prim341);
  }
  if (prim342 !== undefined) {
    tmp.textAnchor = Caml_option.valFromOption(prim342);
  }
  if (prim343 !== undefined) {
    tmp.textRendering = Caml_option.valFromOption(prim343);
  }
  if (prim344 !== undefined) {
    tmp.rubyAlign = Caml_option.valFromOption(prim344);
  }
  if (prim345 !== undefined) {
    tmp.rubyMerge = Caml_option.valFromOption(prim345);
  }
  if (prim346 !== undefined) {
    tmp.rubyPosition = Caml_option.valFromOption(prim346);
  }
  if (prim347 !== undefined) {
    tmp.gap = Caml_option.valFromOption(prim347);
  }
  if (prim348 !== undefined) {
    tmp.columnGap = Caml_option.valFromOption(prim348);
  }
  if (prim349 !== undefined) {
    tmp.rowGap = Caml_option.valFromOption(prim349);
  }
  return tmp;
}

const Ref = React.Ref;

const Children = React.Children;

const Context = React.Context;

const Fragment = React.Fragment;

const StrictMode = React.StrictMode;

const Suspense = React.Suspense;

const Uncurried = React.Uncurried;

const Experimental = React.Experimental;

const $$Event = React.$$Event;

const unsafeAddProp = ReactDOM.Style.unsafeAddProp;

export {
  Ref,
  Children,
  Context,
  Fragment,
  StrictMode,
  Suspense,
  Uncurried,
  Experimental,
  $$Event,
  unsafeAddProp,
  s,
  style,
}
/* No side effect */
