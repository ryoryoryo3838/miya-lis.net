{
  "version": 3,
  "sources": ["../../../_build/default/src/output/node_modules/melange/array.js"],
  "sourcesContent": ["// Generated by Melange\n\nimport * as Caml_array from \"melange.js/caml_array.js\";\nimport * as Caml_exceptions from \"melange.js/caml_exceptions.js\";\nimport * as Caml_js_exceptions from \"melange.js/caml_js_exceptions.js\";\nimport * as Caml_obj from \"melange.js/caml_obj.js\";\nimport * as Caml_option from \"melange.js/caml_option.js\";\nimport * as Curry from \"melange.js/curry.js\";\nimport * as Stdlib__Seq from \"./seq.js\";\nimport * as Stdlib__String from \"./string.js\";\n\nconst Floatarray = {};\n\nfunction init(l, f) {\n  if (l === 0) {\n    return [];\n  }\n  if (l < 0) {\n    throw new Caml_js_exceptions.MelangeError(\"Invalid_argument\", {\n        MEL_EXN_ID: \"Invalid_argument\",\n        _1: \"Array.init\"\n      });\n  }\n  const res = Caml_array.make(l, Curry._1(f, 0));\n  for (let i = 1; i < l; ++i) {\n    res[i] = Curry._1(f, i);\n  }\n  return res;\n}\n\nfunction make_matrix(sx, sy, init) {\n  if (sy < 0) {\n    throw new Caml_js_exceptions.MelangeError(\"Invalid_argument\", {\n        MEL_EXN_ID: \"Invalid_argument\",\n        _1: \"Array.make_matrix\"\n      });\n  }\n  const res = Caml_array.make(sx, []);\n  if (sy > 0) {\n    for (let x = 0; x < sx; ++x) {\n      res[x] = Caml_array.make(sy, init);\n    }\n  }\n  return res;\n}\n\nfunction init_matrix(sx, sy, f) {\n  if (sy < 0) {\n    throw new Caml_js_exceptions.MelangeError(\"Invalid_argument\", {\n        MEL_EXN_ID: \"Invalid_argument\",\n        _1: \"Array.init_matrix\"\n      });\n  }\n  const res = Caml_array.make(sx, []);\n  if (sy > 0) {\n    for (let x = 0; x < sx; ++x) {\n      const row = Caml_array.make(sy, Curry._2(f, x, 0));\n      for (let y = 1; y < sy; ++y) {\n        row[y] = Curry._2(f, x, y);\n      }\n      res[x] = row;\n    }\n  }\n  return res;\n}\n\nfunction copy(a) {\n  const l = a.length;\n  if (l === 0) {\n    return [];\n  } else {\n    return Caml_array.sub(a, 0, l);\n  }\n}\n\nfunction append(a1, a2) {\n  const l1 = a1.length;\n  if (l1 === 0) {\n    return copy(a2);\n  } else if (a2.length === 0) {\n    return Caml_array.sub(a1, 0, l1);\n  } else {\n    return a1.concat(a2);\n  }\n}\n\nfunction sub(a, ofs, len) {\n  if (ofs < 0 || len < 0 || ofs > (a.length - len | 0)) {\n    throw new Caml_js_exceptions.MelangeError(\"Invalid_argument\", {\n        MEL_EXN_ID: \"Invalid_argument\",\n        _1: \"Array.sub\"\n      });\n  }\n  return Caml_array.sub(a, ofs, len);\n}\n\nfunction fill(a, ofs, len, v) {\n  if (ofs < 0 || len < 0 || ofs > (a.length - len | 0)) {\n    throw new Caml_js_exceptions.MelangeError(\"Invalid_argument\", {\n        MEL_EXN_ID: \"Invalid_argument\",\n        _1: \"Array.fill\"\n      });\n  }\n  for (let i = ofs, i_finish = ofs + len | 0; i < i_finish; ++i) {\n    a[i] = v;\n  }\n}\n\nfunction blit(a1, ofs1, a2, ofs2, len) {\n  if (len < 0 || ofs1 < 0 || ofs1 > (a1.length - len | 0) || ofs2 < 0 || ofs2 > (a2.length - len | 0)) {\n    throw new Caml_js_exceptions.MelangeError(\"Invalid_argument\", {\n        MEL_EXN_ID: \"Invalid_argument\",\n        _1: \"Array.blit\"\n      });\n  }\n  Caml_array.blit(a1, ofs1, a2, ofs2, len);\n}\n\nfunction iter(f, a) {\n  for (let i = 0, i_finish = a.length; i < i_finish; ++i) {\n    Curry._1(f, a[i]);\n  }\n}\n\nfunction iter2(f, a, b) {\n  if (a.length !== b.length) {\n    throw new Caml_js_exceptions.MelangeError(\"Invalid_argument\", {\n        MEL_EXN_ID: \"Invalid_argument\",\n        _1: \"Array.iter2: arrays must have the same length\"\n      });\n  }\n  for (let i = 0, i_finish = a.length; i < i_finish; ++i) {\n    Curry._2(f, a[i], b[i]);\n  }\n}\n\nfunction map(f, a) {\n  const l = a.length;\n  if (l === 0) {\n    return [];\n  }\n  const r = Caml_array.make(l, Curry._1(f, a[0]));\n  for (let i = 1; i < l; ++i) {\n    r[i] = Curry._1(f, a[i]);\n  }\n  return r;\n}\n\nfunction map_inplace(f, a) {\n  for (let i = 0, i_finish = a.length; i < i_finish; ++i) {\n    a[i] = Curry._1(f, a[i]);\n  }\n}\n\nfunction mapi_inplace(f, a) {\n  for (let i = 0, i_finish = a.length; i < i_finish; ++i) {\n    a[i] = Curry._2(f, i, a[i]);\n  }\n}\n\nfunction map2(f, a, b) {\n  const la = a.length;\n  const lb = b.length;\n  if (la !== lb) {\n    throw new Caml_js_exceptions.MelangeError(\"Invalid_argument\", {\n        MEL_EXN_ID: \"Invalid_argument\",\n        _1: \"Array.map2: arrays must have the same length\"\n      });\n  }\n  if (la === 0) {\n    return [];\n  }\n  const r = Caml_array.make(la, Curry._2(f, a[0], b[0]));\n  for (let i = 1; i < la; ++i) {\n    r[i] = Curry._2(f, a[i], b[i]);\n  }\n  return r;\n}\n\nfunction iteri(f, a) {\n  for (let i = 0, i_finish = a.length; i < i_finish; ++i) {\n    Curry._2(f, i, a[i]);\n  }\n}\n\nfunction mapi(f, a) {\n  const l = a.length;\n  if (l === 0) {\n    return [];\n  }\n  const r = Caml_array.make(l, Curry._2(f, 0, a[0]));\n  for (let i = 1; i < l; ++i) {\n    r[i] = Curry._2(f, i, a[i]);\n  }\n  return r;\n}\n\nfunction to_list(a) {\n  let _i = a.length - 1 | 0;\n  let _res = /* [] */ 0;\n  while (true) {\n    const res = _res;\n    const i = _i;\n    if (i < 0) {\n      return res;\n    }\n    _res = {\n      hd: a[i],\n      tl: res\n    };\n    _i = i - 1 | 0;\n    continue;\n  };\n}\n\nfunction list_length(_accu, _param) {\n  while (true) {\n    const param = _param;\n    const accu = _accu;\n    if (!param) {\n      return accu;\n    }\n    _param = param.tl;\n    _accu = accu + 1 | 0;\n    continue;\n  };\n}\n\nfunction of_list(l) {\n  if (!l) {\n    return [];\n  }\n  const a = Caml_array.make(list_length(0, l), l.hd);\n  let _i = 1;\n  let _param = l.tl;\n  while (true) {\n    const param = _param;\n    const i = _i;\n    if (!param) {\n      return a;\n    }\n    a[i] = param.hd;\n    _param = param.tl;\n    _i = i + 1 | 0;\n    continue;\n  };\n}\n\nfunction fold_left(f, x, a) {\n  let r = x;\n  for (let i = 0, i_finish = a.length; i < i_finish; ++i) {\n    r = Curry._2(f, r, a[i]);\n  }\n  return r;\n}\n\nfunction fold_left_map(f, acc, input_array) {\n  const len = input_array.length;\n  if (len === 0) {\n    return [\n      acc,\n      []\n    ];\n  }\n  const match = Curry._2(f, acc, input_array[0]);\n  const output_array = Caml_array.make(len, match[1]);\n  let acc$1 = match[0];\n  for (let i = 1; i < len; ++i) {\n    const match$1 = Curry._2(f, acc$1, input_array[i]);\n    acc$1 = match$1[0];\n    output_array[i] = match$1[1];\n  }\n  return [\n    acc$1,\n    output_array\n  ];\n}\n\nfunction fold_right(f, a, x) {\n  let r = x;\n  for (let i = a.length - 1 | 0; i >= 0; --i) {\n    r = Curry._2(f, a[i], r);\n  }\n  return r;\n}\n\nfunction exists(p, a) {\n  const n = a.length;\n  let _i = 0;\n  while (true) {\n    const i = _i;\n    if (i === n) {\n      return false;\n    }\n    if (Curry._1(p, a[i])) {\n      return true;\n    }\n    _i = i + 1 | 0;\n    continue;\n  };\n}\n\nfunction for_all(p, a) {\n  const n = a.length;\n  let _i = 0;\n  while (true) {\n    const i = _i;\n    if (i === n) {\n      return true;\n    }\n    if (!Curry._1(p, a[i])) {\n      return false;\n    }\n    _i = i + 1 | 0;\n    continue;\n  };\n}\n\nfunction for_all2(p, l1, l2) {\n  const n1 = l1.length;\n  const n2 = l2.length;\n  if (n1 !== n2) {\n    throw new Caml_js_exceptions.MelangeError(\"Invalid_argument\", {\n        MEL_EXN_ID: \"Invalid_argument\",\n        _1: \"Array.for_all2\"\n      });\n  }\n  let _i = 0;\n  while (true) {\n    const i = _i;\n    if (i === n1) {\n      return true;\n    }\n    if (!Curry._2(p, l1[i], l2[i])) {\n      return false;\n    }\n    _i = i + 1 | 0;\n    continue;\n  };\n}\n\nfunction exists2(p, l1, l2) {\n  const n1 = l1.length;\n  const n2 = l2.length;\n  if (n1 !== n2) {\n    throw new Caml_js_exceptions.MelangeError(\"Invalid_argument\", {\n        MEL_EXN_ID: \"Invalid_argument\",\n        _1: \"Array.exists2\"\n      });\n  }\n  let _i = 0;\n  while (true) {\n    const i = _i;\n    if (i === n1) {\n      return false;\n    }\n    if (Curry._2(p, l1[i], l2[i])) {\n      return true;\n    }\n    _i = i + 1 | 0;\n    continue;\n  };\n}\n\nfunction mem(x, a) {\n  const n = a.length;\n  let _i = 0;\n  while (true) {\n    const i = _i;\n    if (i === n) {\n      return false;\n    }\n    if (Caml_obj.caml_equal(a[i], x)) {\n      return true;\n    }\n    _i = i + 1 | 0;\n    continue;\n  };\n}\n\nfunction memq(x, a) {\n  const n = a.length;\n  let _i = 0;\n  while (true) {\n    const i = _i;\n    if (i === n) {\n      return false;\n    }\n    if (x === a[i]) {\n      return true;\n    }\n    _i = i + 1 | 0;\n    continue;\n  };\n}\n\nfunction find_opt(p, a) {\n  const n = a.length;\n  let _i = 0;\n  while (true) {\n    const i = _i;\n    if (i === n) {\n      return;\n    }\n    const x = a[i];\n    if (Curry._1(p, x)) {\n      return Caml_option.some(x);\n    }\n    _i = i + 1 | 0;\n    continue;\n  };\n}\n\nfunction find_index(p, a) {\n  const n = a.length;\n  let _i = 0;\n  while (true) {\n    const i = _i;\n    if (i === n) {\n      return;\n    }\n    if (Curry._1(p, a[i])) {\n      return i;\n    }\n    _i = i + 1 | 0;\n    continue;\n  };\n}\n\nfunction find_map(f, a) {\n  const n = a.length;\n  let _i = 0;\n  while (true) {\n    const i = _i;\n    if (i === n) {\n      return;\n    }\n    const r = Curry._1(f, a[i]);\n    if (r !== undefined) {\n      return r;\n    }\n    _i = i + 1 | 0;\n    continue;\n  };\n}\n\nfunction find_mapi(f, a) {\n  const n = a.length;\n  let _i = 0;\n  while (true) {\n    const i = _i;\n    if (i === n) {\n      return;\n    }\n    const r = Curry._2(f, i, a[i]);\n    if (r !== undefined) {\n      return r;\n    }\n    _i = i + 1 | 0;\n    continue;\n  };\n}\n\nfunction split(x) {\n  if (Caml_obj.caml_equal(x, [])) {\n    return [\n      [],\n      []\n    ];\n  }\n  const match = x[0];\n  const n = x.length;\n  const a = Caml_array.make(n, match[0]);\n  const b = Caml_array.make(n, match[1]);\n  for (let i = 1; i < n; ++i) {\n    const match$1 = x[i];\n    a[i] = match$1[0];\n    b[i] = match$1[1];\n  }\n  return [\n    a,\n    b\n  ];\n}\n\nfunction combine(a, b) {\n  const na = a.length;\n  const nb = b.length;\n  if (na !== nb) {\n    throw new Caml_js_exceptions.MelangeError(\"Invalid_argument\", {\n        MEL_EXN_ID: \"Invalid_argument\",\n        _1: \"Array.combine\"\n      });\n  }\n  if (na === 0) {\n    return [];\n  }\n  const x = Caml_array.make(na, [\n    a[0],\n    b[0]\n  ]);\n  for (let i = 1; i < na; ++i) {\n    x[i] = [\n      a[i],\n      b[i]\n    ];\n  }\n  return x;\n}\n\nconst Bottom = /* @__PURE__ */ Caml_exceptions.create(\"Stdlib.Array.Bottom\");\n\nfunction sort(cmp, a) {\n  const maxson = function (l, i) {\n    const i31 = ((i + i | 0) + i | 0) + 1 | 0;\n    let x = i31;\n    if ((i31 + 2 | 0) < l) {\n      if (Curry._2(cmp, Caml_array.get(a, i31), Caml_array.get(a, i31 + 1 | 0)) < 0) {\n        x = i31 + 1 | 0;\n      }\n      if (Curry._2(cmp, Caml_array.get(a, x), Caml_array.get(a, i31 + 2 | 0)) < 0) {\n        x = i31 + 2 | 0;\n      }\n      return x;\n    }\n    if ((i31 + 1 | 0) < l && Curry._2(cmp, Caml_array.get(a, i31), Caml_array.get(a, i31 + 1 | 0)) < 0) {\n      return i31 + 1 | 0;\n    }\n    if (i31 < l) {\n      return i31;\n    }\n    throw new Caml_js_exceptions.MelangeError(Bottom, {\n        MEL_EXN_ID: Bottom,\n        _1: i\n      });\n  };\n  const trickle = function (l, i, e) {\n    try {\n      let _i = i;\n      while (true) {\n        const i$1 = _i;\n        const j = maxson(l, i$1);\n        if (Curry._2(cmp, Caml_array.get(a, j), e) <= 0) {\n          return Caml_array.set(a, i$1, e);\n        }\n        Caml_array.set(a, i$1, Caml_array.get(a, j));\n        _i = j;\n        continue;\n      };\n    }\n    catch (raw_i){\n      const i$2 = Caml_js_exceptions.internalToOCamlException(raw_i);\n      if (i$2.MEL_EXN_ID === Bottom) {\n        return Caml_array.set(a, i$2._1, e);\n      }\n      throw i$2;\n    }\n  };\n  const bubble = function (l, i) {\n    try {\n      let _i = i;\n      while (true) {\n        const i$1 = _i;\n        const j = maxson(l, i$1);\n        Caml_array.set(a, i$1, Caml_array.get(a, j));\n        _i = j;\n        continue;\n      };\n    }\n    catch (raw_i){\n      const i$2 = Caml_js_exceptions.internalToOCamlException(raw_i);\n      if (i$2.MEL_EXN_ID === Bottom) {\n        return i$2._1;\n      }\n      throw i$2;\n    }\n  };\n  const trickleup = function (_i, e) {\n    while (true) {\n      const i = _i;\n      const father = (i - 1 | 0) / 3 | 0;\n      if (i === father) {\n        throw new Caml_js_exceptions.MelangeError(\"Assert_failure\", {\n            MEL_EXN_ID: \"Assert_failure\",\n            _1: [\n              \"array.cppo.ml\",\n              378,\n              4\n            ]\n          });\n      }\n      if (Curry._2(cmp, Caml_array.get(a, father), e) >= 0) {\n        return Caml_array.set(a, i, e);\n      }\n      Caml_array.set(a, i, Caml_array.get(a, father));\n      if (father <= 0) {\n        return Caml_array.set(a, 0, e);\n      }\n      _i = father;\n      continue;\n    };\n  };\n  const l = a.length;\n  for (let i = ((l + 1 | 0) / 3 | 0) - 1 | 0; i >= 0; --i) {\n    trickle(l, i, Caml_array.get(a, i));\n  }\n  for (let i$1 = l - 1 | 0; i$1 >= 2; --i$1) {\n    const e = Caml_array.get(a, i$1);\n    Caml_array.set(a, i$1, Caml_array.get(a, 0));\n    trickleup(bubble(i$1, 0), e);\n  }\n  if (l <= 1) {\n    return;\n  }\n  const e$1 = Caml_array.get(a, 1);\n  Caml_array.set(a, 1, Caml_array.get(a, 0));\n  Caml_array.set(a, 0, e$1);\n}\n\nfunction stable_sort(cmp, a) {\n  const merge = function (src1ofs, src1len, src2, src2ofs, src2len, dst, dstofs) {\n    const src1r = src1ofs + src1len | 0;\n    const src2r = src2ofs + src2len | 0;\n    let _i1 = src1ofs;\n    let _s1 = Caml_array.get(a, src1ofs);\n    let _i2 = src2ofs;\n    let _s2 = Caml_array.get(src2, src2ofs);\n    let _d = dstofs;\n    while (true) {\n      const d = _d;\n      const s2 = _s2;\n      const i2 = _i2;\n      const s1 = _s1;\n      const i1 = _i1;\n      if (Curry._2(cmp, s1, s2) <= 0) {\n        Caml_array.set(dst, d, s1);\n        const i1$1 = i1 + 1 | 0;\n        if (i1$1 >= src1r) {\n          return blit(src2, i2, dst, d + 1 | 0, src2r - i2 | 0);\n        }\n        _d = d + 1 | 0;\n        _s1 = Caml_array.get(a, i1$1);\n        _i1 = i1$1;\n        continue;\n      }\n      Caml_array.set(dst, d, s2);\n      const i2$1 = i2 + 1 | 0;\n      if (i2$1 >= src2r) {\n        return blit(a, i1, dst, d + 1 | 0, src1r - i1 | 0);\n      }\n      _d = d + 1 | 0;\n      _s2 = Caml_array.get(src2, i2$1);\n      _i2 = i2$1;\n      continue;\n    };\n  };\n  const isortto = function (srcofs, dst, dstofs, len) {\n    for (let i = 0; i < len; ++i) {\n      const e = Caml_array.get(a, srcofs + i | 0);\n      let j = (dstofs + i | 0) - 1 | 0;\n      while (j >= dstofs && Curry._2(cmp, Caml_array.get(dst, j), e) > 0) {\n        Caml_array.set(dst, j + 1 | 0, Caml_array.get(dst, j));\n        j = j - 1 | 0;\n      };\n      Caml_array.set(dst, j + 1 | 0, e);\n    }\n  };\n  const sortto = function (srcofs, dst, dstofs, len) {\n    if (len <= 5) {\n      return isortto(srcofs, dst, dstofs, len);\n    }\n    const l1 = len / 2 | 0;\n    const l2 = len - l1 | 0;\n    sortto(srcofs + l1 | 0, dst, dstofs + l1 | 0, l2);\n    sortto(srcofs, a, srcofs + l2 | 0, l1);\n    merge(srcofs + l2 | 0, l1, dst, dstofs + l1 | 0, l2, dst, dstofs);\n  };\n  const l = a.length;\n  if (l <= 5) {\n    return isortto(0, a, 0, l);\n  }\n  const l1 = l / 2 | 0;\n  const l2 = l - l1 | 0;\n  const t = Caml_array.make(l2, Caml_array.get(a, 0));\n  sortto(l1, t, 0, l2);\n  sortto(0, a, l2, l1);\n  merge(l2, l1, t, 0, l2, a, 0);\n}\n\nfunction shuffle_contract_violation(i, j) {\n  const s = Stdlib__String.concat(\"\", {\n    hd: \"Array.shuffle: 'rand \",\n    tl: {\n      hd: String(i + 1 | 0),\n      tl: {\n        hd: \"' returned \",\n        tl: {\n          hd: String(j),\n          tl: {\n            hd: \", out of expected range [0; \",\n            tl: {\n              hd: String(i),\n              tl: {\n                hd: \"]\",\n                tl: /* [] */ 0\n              }\n            }\n          }\n        }\n      }\n    }\n  });\n  throw new Caml_js_exceptions.MelangeError(\"Invalid_argument\", {\n      MEL_EXN_ID: \"Invalid_argument\",\n      _1: s\n    });\n}\n\nfunction shuffle(rand, a) {\n  for (let i = a.length - 1 | 0; i >= 1; --i) {\n    const j = Curry._1(rand, i + 1 | 0);\n    if (!(0 <= j && j <= i)) {\n      shuffle_contract_violation(i, j);\n    }\n    const v = a[i];\n    a[i] = a[j];\n    a[j] = v;\n  }\n}\n\nfunction to_seq(a) {\n  const aux = function (i, param) {\n    if (i >= a.length) {\n      return /* Nil */ 0;\n    }\n    const x = a[i];\n    const partial_arg = i + 1 | 0;\n    return {\n      TAG: /* Cons */ 0,\n      _0: x,\n      _1: (function (param) {\n        return aux(partial_arg, param);\n      })\n    };\n  };\n  return function (param) {\n    return aux(0, param);\n  };\n}\n\nfunction to_seqi(a) {\n  const aux = function (i, param) {\n    if (i >= a.length) {\n      return /* Nil */ 0;\n    }\n    const x = a[i];\n    const partial_arg = i + 1 | 0;\n    return {\n      TAG: /* Cons */ 0,\n      _0: [\n        i,\n        x\n      ],\n      _1: (function (param) {\n        return aux(partial_arg, param);\n      })\n    };\n  };\n  return function (param) {\n    return aux(0, param);\n  };\n}\n\nfunction of_seq(i) {\n  let l = Stdlib__Seq.fold_left((function (acc, x) {\n    return {\n      hd: x,\n      tl: acc\n    };\n  }), /* [] */ 0, i);\n  if (!l) {\n    return [];\n  }\n  const len = list_length(0, l);\n  const a = Caml_array.make(len, l.hd);\n  let _i = len - 2 | 0;\n  let _param = l.tl;\n  while (true) {\n    const param = _param;\n    const i$1 = _i;\n    if (!param) {\n      return a;\n    }\n    a[i$1] = param.hd;\n    _param = param.tl;\n    _i = i$1 - 1 | 0;\n    continue;\n  };\n}\n\nconst concat = Caml_array.concat;\n\nconst fast_sort = stable_sort;\n\nexport {\n  init,\n  make_matrix,\n  init_matrix,\n  append,\n  concat,\n  sub,\n  copy,\n  fill,\n  blit,\n  to_list,\n  of_list,\n  iter,\n  iteri,\n  map,\n  map_inplace,\n  mapi,\n  mapi_inplace,\n  fold_left,\n  fold_left_map,\n  fold_right,\n  iter2,\n  map2,\n  for_all,\n  exists,\n  for_all2,\n  exists2,\n  mem,\n  memq,\n  find_opt,\n  find_index,\n  find_map,\n  find_mapi,\n  split,\n  combine,\n  sort,\n  stable_sort,\n  fast_sort,\n  shuffle,\n  to_seq,\n  to_seqi,\n  of_seq,\n  Floatarray,\n}\n/* No side effect */\n"],
  "mappings": "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",
  "names": ["init", "sub", "blit", "fold_left", "l", "l1", "l2", "concat", "param"]
}
