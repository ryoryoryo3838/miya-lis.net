// _build/default/src/output/node_modules/melange.js/caml_exceptions.js
var idMap = {};
function fresh(str) {
  const v = idMap[str];
  const id = v == null ? 1 : v + 1 | 0;
  idMap[str] = id;
  return id;
}
function create(str) {
  const id = fresh(str);
  return str + ("/" + id);
}
function caml_is_extension(e) {
  if (e == null) {
    return false;
  } else {
    return typeof e.MEL_EXN_ID === "string";
  }
}

// _build/default/src/output/node_modules/melange.js/caml_js_exceptions.js
var MelangeError = function MelangeError2(message, payload) {
  var cause = payload != null ? payload : { MEL_EXN_ID: message };
  var _this = Error.call(this, message, { cause });
  if (_this.cause == null) {
    Object.defineProperty(_this, "cause", {
      configurable: true,
      enumerable: false,
      writable: true,
      value: cause
    });
  }
  Object.defineProperty(_this, "name", {
    configurable: true,
    enumerable: false,
    writable: true,
    value: "MelangeError"
  });
  Object.assign(_this, cause);
  return _this;
};
MelangeError.prototype = Error.prototype;
function internalAnyToExn(any) {
  if (caml_is_extension(any)) {
    return any;
  }
  const exn = new MelangeError("Js__Js_exn.Error/1");
  exn["_1"] = any;
  return exn;
}
var internalToOCamlException = internalAnyToExn;

// _build/default/src/output/node_modules/melange.js/caml_array.js
function sub(x, offset, len2) {
  const result = new Array(len2);
  let j = 0;
  let i = offset;
  while (j < len2) {
    result[j] = x[i];
    j = j + 1 | 0;
    i = i + 1 | 0;
  }
  ;
  return result;
}
function len(_acc, _l) {
  while (true) {
    const l = _l;
    const acc = _acc;
    if (!l) {
      return acc;
    }
    _l = l.tl;
    _acc = l.hd.length + acc | 0;
    continue;
  }
  ;
}
function fill(arr, _i, _l) {
  while (true) {
    const l = _l;
    const i = _i;
    if (!l) {
      return;
    }
    const x = l.hd;
    const l$1 = x.length;
    let k = i;
    let j = 0;
    while (j < l$1) {
      arr[k] = x[j];
      k = k + 1 | 0;
      j = j + 1 | 0;
    }
    ;
    _l = l.tl;
    _i = k;
    continue;
  }
  ;
}
function concat(l) {
  const v = len(0, l);
  const result = new Array(v);
  fill(result, 0, l);
  return result;
}
function set(xs, index, newval) {
  if (index < 0 || index >= xs.length) {
    throw new MelangeError("Invalid_argument", {
      MEL_EXN_ID: "Invalid_argument",
      _1: "index out of bounds"
    });
  }
  xs[index] = newval;
}
function get(xs, index) {
  if (index < 0 || index >= xs.length) {
    throw new MelangeError("Invalid_argument", {
      MEL_EXN_ID: "Invalid_argument",
      _1: "index out of bounds"
    });
  }
  return xs[index];
}
function make(len2, init) {
  const b = new Array(len2);
  for (let i = 0; i < len2; ++i) {
    b[i] = init;
  }
  return b;
}
function blit(a1, i1, a2, i2, len2) {
  if (i2 <= i1) {
    for (let j = 0; j < len2; ++j) {
      a2[j + i2 | 0] = a1[j + i1 | 0];
    }
    return;
  }
  for (let j$1 = len2 - 1 | 0; j$1 >= 0; --j$1) {
    a2[j$1 + i2 | 0] = a1[j$1 + i1 | 0];
  }
}

// _build/default/src/output/node_modules/melange.js/curry.js
function app(_f, _args) {
  while (true) {
    const args = _args;
    const f = _f;
    const init_arity = f.length;
    const arity = init_arity === 0 ? 1 : init_arity;
    const len2 = args.length;
    const d = arity - len2 | 0;
    if (d === 0) {
      return f.apply(null, args);
    }
    if (d >= 0) {
      return function(x) {
        return app(f, args.concat([x]));
      };
    }
    _args = sub(args, arity, -d | 0);
    _f = f.apply(null, sub(args, 0, arity));
    continue;
  }
  ;
}
function _1(o, a0) {
  const arity = o.length;
  if (arity === 1) {
    return o(a0);
  } else {
    switch (arity) {
      case 1:
        return o(a0);
      case 2:
        return function(param) {
          return o(a0, param);
        };
      case 3:
        return function(param, param$1) {
          return o(a0, param, param$1);
        };
      case 4:
        return function(param, param$1, param$2) {
          return o(a0, param, param$1, param$2);
        };
      case 5:
        return function(param, param$1, param$2, param$3) {
          return o(a0, param, param$1, param$2, param$3);
        };
      case 6:
        return function(param, param$1, param$2, param$3, param$4) {
          return o(a0, param, param$1, param$2, param$3, param$4);
        };
      case 7:
        return function(param, param$1, param$2, param$3, param$4, param$5) {
          return o(a0, param, param$1, param$2, param$3, param$4, param$5);
        };
      default:
        return app(o, [a0]);
    }
  }
}
function _2(o, a0, a1) {
  const arity = o.length;
  if (arity === 2) {
    return o(a0, a1);
  } else {
    switch (arity) {
      case 1:
        return app(o(a0), [a1]);
      case 2:
        return o(a0, a1);
      case 3:
        return function(param) {
          return o(a0, a1, param);
        };
      case 4:
        return function(param, param$1) {
          return o(a0, a1, param, param$1);
        };
      case 5:
        return function(param, param$1, param$2) {
          return o(a0, a1, param, param$1, param$2);
        };
      case 6:
        return function(param, param$1, param$2, param$3) {
          return o(a0, a1, param, param$1, param$2, param$3);
        };
      case 7:
        return function(param, param$1, param$2, param$3, param$4) {
          return o(a0, a1, param, param$1, param$2, param$3, param$4);
        };
      default:
        return app(o, [
          a0,
          a1
        ]);
    }
  }
}
function _3(o, a0, a1, a2) {
  const arity = o.length;
  if (arity === 3) {
    return o(a0, a1, a2);
  } else {
    switch (arity) {
      case 1:
        return app(o(a0), [
          a1,
          a2
        ]);
      case 2:
        return app(o(a0, a1), [a2]);
      case 3:
        return o(a0, a1, a2);
      case 4:
        return function(param) {
          return o(a0, a1, a2, param);
        };
      case 5:
        return function(param, param$1) {
          return o(a0, a1, a2, param, param$1);
        };
      case 6:
        return function(param, param$1, param$2) {
          return o(a0, a1, a2, param, param$1, param$2);
        };
      case 7:
        return function(param, param$1, param$2, param$3) {
          return o(a0, a1, a2, param, param$1, param$2, param$3);
        };
      default:
        return app(o, [
          a0,
          a1,
          a2
        ]);
    }
  }
}

export {
  create,
  MelangeError,
  internalToOCamlException,
  sub,
  concat,
  set,
  get,
  make,
  blit,
  _1,
  _2,
  _3
};
//# sourceMappingURL=chunk-3PFLCYLG.js.map
