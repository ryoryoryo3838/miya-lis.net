import {
  MelangeError
} from "./chunk-ULNTNCMQ.js";

// _build/default/src/output/node_modules/melange.js/caml_obj.js
var for_in = (function(o, foo) {
  for (var x in o) {
    foo(x);
  }
});
function caml_equal(a, b) {
  if (a === b) {
    return true;
  }
  const a_type = typeof a;
  if (a_type === "string" || a_type === "number" || a_type === "bigint" || a_type === "boolean" || a_type === "undefined" || a === null) {
    return false;
  }
  const b_type = typeof b;
  if (a_type === "function" || b_type === "function") {
    throw new MelangeError("Invalid_argument", {
      MEL_EXN_ID: "Invalid_argument",
      _1: "equal: functional value"
    });
  }
  if (b_type === "number" || b_type === "bigint" || b_type === "undefined" || b === null) {
    return false;
  }
  const tag_a = a.TAG;
  const tag_b = b.TAG;
  if (tag_a === 248) {
    return a[1] === b[1];
  }
  if (tag_a === 251) {
    throw new MelangeError("Invalid_argument", {
      MEL_EXN_ID: "Invalid_argument",
      _1: "equal: abstract value"
    });
  }
  if (tag_a !== tag_b) {
    return false;
  }
  const len_a = a.length | 0;
  const len_b = b.length | 0;
  if (len_a === len_b) {
    if (Array.isArray(a)) {
      let _i = 0;
      while (true) {
        const i = _i;
        if (i === len_a) {
          return true;
        }
        if (!caml_equal(a[i], b[i])) {
          return false;
        }
        _i = i + 1 | 0;
        continue;
      }
      ;
    } else if (a instanceof Date && b instanceof Date) {
      return !(a > b || a < b);
    } else {
      const result = {
        contents: true
      };
      const do_key_a = function(key) {
        if (!Object.prototype.hasOwnProperty.call(b, key)) {
          result.contents = false;
          return;
        }
      };
      const do_key_b = function(key) {
        if (!Object.prototype.hasOwnProperty.call(a, key) || !caml_equal(b[key], a[key])) {
          result.contents = false;
          return;
        }
      };
      for_in(a, do_key_a);
      if (result.contents) {
        for_in(b, do_key_b);
      }
      return result.contents;
    }
  } else {
    return false;
  }
}

export {
  caml_equal
};
//# sourceMappingURL=chunk-F5P5KGF6.js.map
